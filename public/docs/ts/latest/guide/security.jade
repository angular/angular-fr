block includes
  include ../_util-fns
:marked
  Le domaine de la sécrurité des applications web est très vaste. Ce chapitre présente les protections
  incluses dans Angular contre les vulnérabilités et attaques communes d'applications web telles que
  les attaques Cross Site Scripting. Il ne traitera pas de sécurité applicative telles que
  l'authentification (_Qui est cet utilisateur ?_) ou les niveaux de privilèges (_Que peut faire cet utilisateur ?_).

  L'[Open Web Application Security Project (OWASP)](https://www.owasp.org/index.php/Category:OWASP_Guide_Project) regroupe
  de nombreuses informations au sujet des attaques et altérations décrites ci-dessous.

.l-main-section
:marked
  # Table Of Contents

  * [Signaler des failles](#report-issues)
  * [Bonnes pratiques](#best-practices)
  * [Se prémunir des failles Cross-Site Scripting (XSS)](#xss)
  * [Données de confiance](#bypass-security-apis)
  * [Vulnérabilités HTTP](#http)
  * [Auditer une application Angular](#code-review)

  Essayez <live-example>l'example en ligne</live-example> du code de ce chapitre.

.l-main-section
h2#report-issues Signaler des failles
:marked
  Envoyez-nous un Email à [security@angular.io](mailto:security@angular.io) pour signaler des
  failles dans Angular.

  Pour plus de détails sur la manière dont Google gère les problèmes de sécurité, veuillez vous référer
  à la [politique de sécurité Google](https://www.google.com/about/appsecurity/).

.l-main-section
h2#best-practices Bonnes pratiques
:marked
  * **Veillez à utiliser la dernière version d'Angular.**
  Nous mettons régulièrement Angular à jour. Ces mises à jour peuvent corriger des problèmes de sécurité
  découverts dans des versions précédentes. Consultez les mises à jour de sécurité dans le [change
  log](https://github.com/angular/angular/blob/master/CHANGELOG.md).

  * **Ne modifiez pas votre copie d'Angular.**
  Les versions privées et modifiées d'Angular sont souvent en retard par rapport à la version courante
  et peuvent manquer des correctifs de sécurité importants et des évolutions. Partagez plutôt vos
  améliorations d'Angular avec la communauté et faites une pull request.

  * **Évitez les APIs Angular signalées “[_Risque de sécurité_](#bypass-security-apis)" dans la documentation.**

.l-main-section
h2#xss Se prémunir des failles Cross-Site Scripting (XSS)
:marked
  Le [Cross-Site Scripting (XSS)](https://fr.wikipedia.org/wiki/Cross-site_scripting) permet aux attaquants
  d'injecter du code malicieux dans des pages web. Un tel code peut, par exemple, voler les données de
  l'utilisateur (en particulier leurs données d'authentification), ou effectuer des actions sous son identité.
  C'est une des attaques les plus communes sur le web.

  Pour contrer les attaques XSS, nous devons empêcher le code malicieux d'entrer dans le DOM. Par exemple, si
  un attaquant réussi à insérer une baise `<script>` dans le DOM, il peut alors exécuter du code arbitraire
  sur notre site. L'attaque ne se limite pas aux balises `<script>` - beaucoup d'éléments et de propriétés du
  DOM autorisent d'éxecuter du code, par exemple `<img onerror="...">`, `<a href="javascript:...">`. Si des données
  manipulées par un attaquant entrent dans le DOM, nous devons nous attendre à des failles de sécurité.

  ### Modèle de sécrutiré d'Angular contre le Cross-site Scripting

  Pour bloquer systématiquement les attaques XSS, Angular traite par défaut toutes les données comme
  n'étant pas de confiance. Lorsque des données sont insérées dans le DOM depuis un template, via une
  propriété, un attribut, un style, par liaison de classe ou par évaluation, Angular sécurise et
  échape les données douteuses.

  **Les templates Angular sont également du code éxecutable** : HTML, attributs et les expressions de laison
  (mais pas les données liées !) dans les templates sont considérés comme étant de confiance. Cela signifie
  que les applications doivent éviter que des données contrôlées par des attaquants potentiels ne puisse arriver
  dans le code source d'un template. Ne générez jamais un template en concaténant entrées utilisateurs et templates !
  Utiliser le [compilateur de templates hors-ligne](#offline-template-compiler) est une manière efficace de se prémunir
  de ces failles, aussi connues sous le nom d'injection de template.

  ### Sécurisation et contextes de sécurité

  La sécurisation consiste en l'inspection d'une donnée douteuse pour la transformer en une donnée que l'on peut
  insérer dans le DOM en toute sécurité. La plupart du temps, les données ne sont pas modifiées. La sécurisation
  dépend du contexte : des données inoffenssives dans du CSS sont potentiellement dangereuses dans une URL.

  Angular défini quatre contextes de sécurité : HTML, style, URL et URL de ressources.

  * HTML est utilisé lorsque l'on interprête des données en tant que HTML, i.e., lorsque l'on utilise `innerHtml`
  * Style est utilisé lorsque l'on passe du CSS via la propriété `style`
  * URL est utilisé pour les propriétés des URLs telles que `<a href>`
  * Les URL de ressources sont des URL qui seront chargées et éxecutées comme du code, i.e., dans `<script src>`

  Angular sécurise les données douteuses pour les trois premiers cas; il n'est pas possible de sécuriser
  des URL de ressources dans la mesure où elles contiennent du code arbitraire. En mode développement, Angular affiche
  un message d'erreur dans la console lorsque des données doivent être modifiées durant la sécurisation.

  ### Exemple de sécurisation

  Le template ci-dessous lie la valeur de `htmlSnippet`. Une fois en l'évaluant dans le contenu
  d'un élément et une fois en la liant à la propriété `innerHtml`.

+makeExample('app/inner-html-binding.component.html')

:marked
  Le contenu évalué est toujours échapé - l'HTML n'est pas interprété et le navigateur affiche des
  accolades dans le texte contenu dans l'élément.

  Pour que le HTML soit interprété, il faut le lier sur une propriété HTML, telle que `innerHTML`. Par
  contre, lier des données contrôlées par un attaquant potentiel sur `innerHTML` causerait une faille
  XSS. Par exemple, le code contenu dans une balise `<script>` serait éxecuté.

+makeExcerpt('app/inner-html-binding.component.ts ()', 'inner-html-controller')

:marked
  Angular considère les données comme non sûres et les sécurise automatiquement. Il retire les balises
  `<script>` mais conserve le contenu sûr tel que le texte brut contenu dans la balise `<script>` ou un
  `<b>`.

figure.image-display
    img(src='/resources/images/devguide/security/binding-inner-html.png'
    alt="Une capture d'écran montrant des données HTML évaluées et liées")
:marked
  ### Éviter l'usage directe des APIs du DOM

  Les APIs du DOM incluses dans les navigateurs ne vous protègent pas automatiquement des vulnérabilités.
  Par exemple, `document`, le nœud accessible via `ElementRef`, et beaucoup d'autres APIs tierces
  contiennent des méthodes non sûres. Évitez d'interagir directement avec le DOM. Préférez plutôt
  utiliser les templates Angular lorsque cela est possible.

  ### Content Security Policy

  Une [Content Security Policy (CSP)](http://www.html5rocks.com/en/tutorials/security/content-security-policy/) est une technique
  de défense bas niveau pour se prémunir des failles XSS. Pour activer CSP, configurez votre serveur web pour retourner un en-tête
  HTTP `Content-Security-Policy` approprié.

  <a id="offline-template-compiler"></a>

  ### Utiliser le complilateur de template hors-ligne

  Le compilateur de templates hors-ligne prévient totalement des vulnérabilités appelées injection de
  template et augmente significativement les performances de l'application. Utilisez le compilateur de
  template hors-ligne lors de déploiements en production. Ne générez pas dynamiquement vos templates.
  Angular fait confiance au code des templates, donc les générer, en particulier lorsqu'ils contiennent
  des données utilisateur, contourne les protections mises en place par Angular. Référez-vous à la
  [Documentation sur les Formulaires Dynamiques](../cookbook/dynamic-form.html) pour ce qui concerne
  la construction dynamique de formulaires de manière sécurisée.

  ### Protections contre le XSS côté serveur

  Le HTML construit côté serveur est vulnérable aux attaques par injection. Injecter du code de template
  dans une application Angular revient à injecter du code éxecutable dans l'application; cela donne un
  contrôle complet de notre application à l'attaquant. Pour s'en défendre, veillez à utiliser un langage
  de template qui échape automatiquement les données pour vous prémunir des vulnérabilités XSS sur le
  serveur. Ne générez jamais un template Angular côté serveur en utilisant un langage de création de
  template. Cela risque fortement d'introduire des failles d'injections de template.

.l-main-section
h2#bypass-security-apis Données de confiance
:marked
  Parfois, les applications nécessitent d'inclure du code éxecutable, d'afficher une `<iframe>` depuis
  une URL quelconque ou encore de construire des URLs potentiellement dangereuses. Pour éviter la
  sécurisation automatique dans ces situations, vous pouvez informer Angular du fait que vous avez
  inspecté les données, vérifié la manière dont elles sont générées et vous êtes assurés qu'elles sont
  toujours sécurisées. Mais **soyez prudents** ! Si vous faites confiance à des données malicieuses, vous
  introduirez certainement des failles de sécurité dans votre applications. Si vous avez des doutes,
  trouvez un professionnel pour un audit de sécurité.

  Vous pouvez marquer des données comme étant de confiance en injectant `DomSanitizationService` et en
  appelant une des méthodes suivantes.

  * `bypassSecurityTrustHtml`
  * `bypassSecurityTrustScript`
  * `bypassSecurityTrustStyle`
  * `bypassSecurityTrustUrl`
  * `bypassSecurityTrustResourceUrl`

  Souvenez-vous, le niveau de confiance accordable à des données est dépendant du contexte, vous devez
  donc choisir le bon contexte pour votre usage de ces données. Imaginez que le template suivant nécessite
  de lier une URL à un appel du type `javascript:alert(...)`.

+makeExcerpt('app/bypass-security.component.html ()', 'dangerous-url')

:marked
  Normalement, Angular sécurise automatiquement les URLs, désactive le code dangereux et,
  en mode développement, consigne ce mécanisme dans la console. Pour éviter cela,
  vous pouvez marquer les URLs comment étant des URLs de confiance en utilisant l'appel
  à `bypassSecurityTrustUrl` :

+makeExcerpt('app/bypass-security.component.ts ()', 'trust-url')

figure.image-display
    img(src='/resources/images/devguide/security/bypass-security-component.png'
        alt="Une capture d'écran montrant une alerte créée depuis une URL considérée comme étant de confiance")

:marked
  Si l'on a besoin de convertir des entrées utilisateur en données de confiance, il peut être pratique
  de le faire dans une méthode d'un contrôleur. Le template ci-dessous autorise l'utilisateur à entrer
  l'ID d'une vidéo YouTube et charge la vidéo correspondante dans une `<iframe>`. L'attribut `<iframe src>`
  représente un contexte de sécurité d'URL de ressources car des sources douteuses peuvent télécharger secrètement
  des fichiers que des utilisateurs peu soucieux pourraient éxecuter. Nous appelons donc une méthode du
  contrôleur pour construire une URL de vidéo sûre qu'Angular permettra ensuite de lier à l'attribut
  `iframe src`.

+makeExcerpt('app/bypass-security.component.html ()', 'iframe-videoid')
+makeExcerpt('app/bypass-security.component.ts ()', 'trust-video-url')

.l-main-section
h2#http Vulnérabilités HTTP
:marked
  Angular implémente nativement des protections aidant à se prémunir des deux vulnérabilités HTTP
  les plus communes, les Cross-site Request Forgery (XSRF) et Cross-site Scripting Inclusion (XSSI).
  Ces deux failles doivent être traitées en amont côté serveur mais Angular fournis des aides
  pour rendre l'implémentation côté client plus simple.

h3#xsrf Cross-site Request Forgery (XSRF)
:marked
  Dans une Cross-site Request Forgery (XSRF ou CSRF), un attaquant trompe l'utilisateur et lui fait
  visiter une page _différente_ qui lui fait valider un formulaire qui envoie des requêtes au serveur
  web de votre application. Si l'utilisateur est authentifié dans l'application, le navigateur enverra
  les cookies d'authentification et l'attaquant pourrait &mdash; par exemple &mdash; provoquer un transfert
  d'argent sous le nom de l'utilisateur en effectuant la bonne requête.

  Pour éviter cela, votre application doit d'assurer que les requêtes utilisateur proviennent bien
  de votre application et non pas d'un autre site. Une technique courante consiste a envoyer un jeton
  d'authentification généré aléatoirement dans un cookie, souvent appelé `XSRF-TOKEN`. Les cookies ne peuvent
  être lus que par le site par lequel ils ont été créés, ainsi seule votre application peut lire ce jeton.
  À chaque appel à l'API, le serveur valide le client en vérifiant que le jeton est bien renvoyé, typiquement
  dans un entête HTTP appelé `X-XSRF-TOKEN`.

  Le client `http` d'Angular supporte nativement cette technique. Le cookie `CookieXSRFStrategy` vérifie
  l'existance d'un cookie nommé `XSRF-TOKEN` et rempli l'entête HTTP `X-XSRF-TOKEN` avec la valeur de ce cookie
  à chaque requête. Le serveur doit attribuer une valeur au cookie `XSRF-TOKEN` et valider l'entête de la réponse
  pour chaque reqête modifiant l'état de l'application.

  Les jetons XSRF devraient être uniques pour chaque utilisateur et sessions, avoir une valeur importante générée
  aléatoirement par un générateur de nombres aléatoires sécurisé cryptographiquement et avoir une date d'expiration.

  Les applications Angular peuvent personnaliser le nommage des cookies et entêtes en fournissant
  leur propre valeur pour `CookieXSRFStrategy` ou bien implémenter complètement une stratégie `XSRFStrategy`
  personnalisée en ajoutant l'un de ces providers :

code-example(language="typescript").
  { provide: XSRFStrategy, useValue: new CookieXSRFStrategy('myCookieName', 'My-Header-Name')}
  { provide: XSRFStrategy, useClass: MyXSRFStrategy}

:marked
  Apprenez-en plus sur les Cross Site Request Forgery (XSRF) sur le site de l'Open Web Application
  Security Project (OWASP)[ici](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29)
  et [ici](https://www.owasp.org/index.php/CSRF_Prevention_Cheat_Sheet). Cet [article de l'Université
  de Stanford](https://seclab.stanford.edu/websec/csrf/csrf.pdf) est également une source très détaillée.

h3#xssi Cross-site Script Inclusion (XSSI)
:marked
  Les Cross-site Script Inclusions, aussi connues sous le nom de vulnérabilité JSON, peuvent autoriser
  le site web d'un attaquant à lire des données provenant d'une API JSON. L'attaque fonctionne sur d'anciens
  navigateurs en surchargeant le constructeur de l'Object natif de JavaScript puis en incluant l'URL d'une API
  en utilisant une balise `<script>`.

  Cette attaque ne peut fonctionner que si le JSON retourné est éxecutable en tant que JavaScript. Les serveurs
  peuvent éviter cette attaque en préfixant toutes les réponses JSON afin de les rendre non éxecutables. Par
  convention, on utilise la chaîne de caractère bien connue `")]}',\n"`.

  La bibliothèque `Http` d'Angular suit ces conventions et retire automatiquement le chaîne
  `")]}',\n"` de toutes les réponses avant de les parser réellement.

  Apprenez-en plus à propos dans la section XSSI sur cet[article de blog de Google web security]
  (https://security.googleblog.com/2011/05/website-security-for-webmasters.html)

.l-main-section
h2#code-review Auditer une application Angular
:marked
  Les applications Angular devraient suivre les mêmes consignes de sécurités que toute application web
  et devraient être auditées en tant que telle. Les APIs spécifiques à Angular devant être auditées dans
  une revue de sécurité, telles que les APIs [_bypassSecurityTrust_](#bypass-security-apis) sont marquées
  comme senseibles dans la documentation.

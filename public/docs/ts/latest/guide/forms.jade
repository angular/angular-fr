include ../_util-fns

.alert.is-important
  :marked
    Ce guide utilise la nouvelle API de formulaire. Pour utiliser cette API, vous devez ajouter quelques
    dépendances à votre fichier de démarrage (Voir la section Démarrage plus bas).
    
    L'ancienne API est déprécié, mais nous continuons à maintenir une version séparé du guide de
    la version déprécié de l'API de formulaires <a href='/docs/ts/latest/guide/forms-deprecated.html'>ici</a>.

:marked
  Nous avons tous utilisé un formulaire pour s'identifier, soumettre une demande d'aide,
  passer une commande, réserver un vol, planifier une réunion ou effectuer d'innombrables autres tâches de saisie de données.
  Les formulaires sont les fondations de toutes applications métiers.

  Tout développeur web chevronné peut créer un formulaire HTML avec toutes les bonnes balises.
  Il est plus difficile de créer une expérience de saisie de données uniforme qui guide
  l'utilisateur de manière rapide et efficace à travers les différentes étapes du formulaire.

  *Ceci* requiert des compétence en design, pour être franc, c'est hors du contexte de ce chapitre.

  Dans un formulaire, il faut pouvoir gérer 
  **la liaison bidirectionnelle des données, le suivi des changements, la validation des champs et la gestion des erreurs**.
  ... nous allons traiter ces différents points tout au long de ce chapitre.

  Nous allons construire un formulaire simple à partir de zéro, pas à pas, durant lequel nous apprendrons

  - à construire un formulaire Angular en utilisant un composant et un modèle

  - la liaison bidirectionnelle des données avec la syntaxe de `[(ngModel)]` pour lire et écrire les valeurs des formulaires de saisie

  - l'utilisation de `ngModel` pour suivre les changements et la validité des valeurs dans un formulaire

  - l'ajout de classes CSS qui suivent l'état du formulaire pour fournir une bonne interaction avec l'utilisateur

  - à afficher des messages d'erreurs et à activer/désactiver le contrôle des champs du formulaire

  - partager des informations entre les champs avec les références de template
  
  [Exemple en ligne](/resources/live-examples/forms/ts/plnkr.html)

.l-main-section
:marked
   ## Démarrage

   Nous commençons par montrer comment démarrer l'application et y ajouter les dépendances nécessaires pour utiliser les formulaires.

   Pendant le démarrage, nous devons enregistrer le module de formulaire en appelant `provideForms()` et en retournant le résultat dans le tableau des dépendances.
+makeExample('forms/ts/app/main.ts','','app/main.ts')   

:marked
   L'ancienne API de formulaires est dépréciée. Au cours de cette transition Angular supporte les deux modules de formulaire.

   Pour nous rappeler que l'ancienne API est obsolète, Angular affiche un message d'alerte à la console.
   
   Puisque nous utilisons la nouvelle API, nous appelons `disableDeprecatedForms()` pour désactiver l'ancienne API de formulaire et le message d'alerte.

.l-main-section
:marked
  ## Les Formulaires à travers les Templates

  Beaucoup d'entre nous construirons des formulaires à partir des modèles dans Angular [Syntaxe de Template](./template-syntax.html) avec
  les directives spécifiques de formulaires et les techniques décrites dans ce chapitre.
.l-sub-section
  :marked
    C'est la méthode que nous allons aborder dans ce chapitre. Cependant, il existe d'autres méthodes pour créer des formulaires.
:marked
  Nous pouvons construire presque tous les formulaires dont nous avons besoin avec les modèles d'Angular &mdash; formulaire d'authentification, de contact ... à peu près tous les formulaires métiers.
  Nous pouvons disposer les éléments de contrôles intuitivement, lier ces éléments aux données, spécifier les règles de validations et afficher les messages d'erreurs,
  activer ou désactiver des champs spécifiques, déclencher un retour visuel à l'utilisateur, et bien plus.

  Ça sera assez facile parce qu'Angular va gérer la plupart des actions répétitives, ainsi que les tâches réutilisables
  qu'on se serai coltiner.

  Nous allons chercher à construire le modèle de formulaire suivant:

figure.image-display
  img(src="/resources/images/devguide/forms/hero-form-1.png" width="400px" alt="Clean Form")

:marked
  Ici, à *Hero Employment Agency* nous utilisons ce formulaire pour conserver des informations personnelles sur les
  héros. Chaque héros a besoin d'un emploi. Il est de notre mission de proposer le bon emploi au bon héros!

  Deux des trois champs de ce formulaire sont obligatoires. Les champs obligatoires ont une barre verte sur la gauche pour les rendre faciles à repérer.

  Si nous supprimons le nom du héros, le formulaire affiche une erreur de validation qui attire le regard:

figure.image-display
  img(src="/resources/images/devguide/forms/hero-form-2.png" width="400px" alt="Invalid, Name Required")

:marked
  Notez que le bouton de soumission n'est pas actif et que la barre verte du champ obligatoire est passé au rouge.

.l-sub-section
  p Nous allons personnaliser les couleurs et la position de la barre signalant un champ obligatoire avec du CSS standard.

:marked
  Nous créerons le formulaire en suivant les petites étapes ci-dessous

  1. Créer la classe du modèle `Hero`
  1. Créer le composant qui contrôlera le formulaire
  1. Créer une vue avec la mise en page du formulaire initiale
  1. Lier les propriétés à chaque champ avec la syntaxe de liaison bidirectionnelle de `ngModel`
  1. Ajouter l'attribut **#name** pour chaque champ du formulaire
  1. Personnaliser le CSS pour fournir une meilleur interaction utilisateur
  1. Afficher et cacher les message d'erreurs
  1. Soumettre le formulaire avec **ngSubmit**
  1. Désactiver la soumission tant que le formulaire n'est pas valide

:marked
  ## Initialisation
  Créer un nouveau projet (`angular2-forms`) et suivez les étapes du [QuickStart] (../ quickstart.html).

include ../_quickstart_repo
:marked
  ## Créer le modèle Hero

  Puisque l'utilisateur modifiera le formulaire, nous traquerons les changements et mettrons à jour une instance de Hero.
  Nous ne pouvons construire le formulaire avant de savoir ce qu'on a dans le modèle.

  Un modèle peut être vu simplement comme un conteneur de propriété, qui garde les informations importantes de l'application.
  Ceci décrit bien notre classe `Hero` avec ces trois champs obligatoire (`id`, `name`, `power`)
  et le champ optionnel (`alterEgo`).

  Créez un nouveau fichier `hero.ts` dans le dossier app et lui donner la définition de classe suivante:

+makeExample('forms/ts/app/hero.ts', null, 'app/hero.ts')

:marked
  c'est un modèle simple avec quelques exigences et aucun comportement. Parfait pour la démo.

  Le compilateur TypeScript génère un champs public pour chaque paramètre `public` du constructeur et
  assigne la valeur du paramètre à ce champ automatiquement à chaque nouvelle instance de Hero.
  
  Le `alterEgo` est optionnel et le constructeur nous autorise l'omission de ce dernier; notez le (?) dans `alterEgo?`.

  Nous pouvons créer un nouvel héros comme suit:
code-example(format="").
  let myHero =  new Hero(42, 'SkyDog', 
                         'Fetch any object at any distance', 'Leslie Rollover');
  console.log('My hero is called ' + myHero.name); // "My hero is called SkyDog"
:marked

.l-main-section
:marked
  ## Créer le composant du formulaire

  Un formulaire Angular se compose de deux parties: un template HTML et un Composant qui permet de gérer les données et les interactions utilisateurs.

  Nous commençons avec le composant parce qu'il décrit, en bref, ce qu'on peut faire dans l'édition d'un Hero.

  Créez un nouveau fichier appelé `hero-form.component.ts` et définissez le comme suit:

+makeExample('forms/ts/app/hero-form.component.ts', 'first', 'app/hero-form.component.ts')

:marked
  Il n'y a rien de spécial sur ce composant, pas de spécificité lié au formulaire, rien qui le distingue des composants précédemment écrit.

  La compréhension de ce composant nécessite seulement deux concepts d'Angular 2 que nous avons appris précédemment

  1. On import le décorateur `Component` de la librairie d'Angular comme d'habitude.

  1. Le décorateur `@Component` de "hero-form" veut dire que nous pourrons réutiliser le formulaire avec tag `<hero-form>`.

  1. La propriété `templateUrl` correspond au fichier de template HTML appelé `hero-form.component.html`.

  1. Nous définissons des données fictives pour `model` and `powers`.
  Plus tard, nous pourrons injecter un service de données pour récupérer et sauvegarder de vrai données
  ou peut-être exposer ces propriétés comme [inputs and outputs](./template-syntax.html#inputs-outputs) pour les lier à un composant parant
  Rien de tous ça n'affecte notre formulaire.

  1. Nous avons pensé utile d'avoir une propriété `diagnostic` qui retourne une représentation JSON de notre modèle.
  Cela permettra de vérifier ce que nous faisons durant notre développement; Nous avons laissé une note pour le nettoyer plus tard.

  Pourquoi n'écrivons pas le template en mode inline directement dans le composant comme nous le faisons souvent
  ailleurs dans le Guide du Développeur ?

  Il n'y a pas de “bonnes” réponse pour toutes les questions ? Nous aimons les templates en mode inline quand il sont court.
  La plupart de template de formulaire ne seront pas court. Les fichiers TypeScript et JavaScript ne sont généralement pas le bonne place pour
  écrire (ou lire) du code HTML.
  Il est aussi préférable d'avoir de fichier court et facile à lire comme celui ci.

  Nous avons fait le bon choix d'avoir mis le template html ailleurs.
  Nous allons écrire ce template dans un instant. Avant, nous allons retourner une étape en arrière
  et revoir `app.component.ts` pour utiliser notre nouveau `HeroFormComponent`.

.l-main-section
:marked
  ## Révision de *app.component.ts*

  `app.component.ts` est le composant racine de l'application. Il utilisera notre nouveau `HeroFormComponent`.

  Remplacer le contenu de la version du "QuickStart" par le code ci-dessous:
+makeExample('forms/ts/app/app.component.ts', null, 'app/app.component.ts')

:marked
.l-sub-section
  :marked
    Il y a seulement trois changements:

    1. Nous importons le nouveau `HeroFormComponent`.

    1. Le `template` contient juste la nouvelle balise identifiée par la propriété `selector` du composant.

    1. Le tableau `directives` dit à Angular que notre template dépends de `HeroFormComponent`
    qui est lui même une Directive (puisque tous est Composant).

.l-main-section
:marked
  ## Créer un template initial de formulaire

  Créer un nouveau fichier appelé `hero-form.component.html` et le définir comme ceci:

+makeExample('forms/ts/app/hero-form.component.html', 'start', 'app/hero-form.component.html')

:marked
  Ceci est du HTML5 habituel. Nous affichons deux des champ de la classe `Hero`, `name` et `alterEgo`.

  Le champ *Name* a l'attribut HTML5 `required`;
  Le champ *Alter Ego* ne l'a pas, puisqu'il est optionnel.

  Nous avons un bouton *Submit* en bas avec quelques classes dessus.

  **Nous n'utilisons pas encore Angular**. Il n'y a pas de liaison. Ni de directives. Juste de l'affichage.

  Les classes `container`,`form-group`, `form-control`, et `btn`
  viennent de [Twitter Bootstrap](http://getbootstrap.com/css/). Juste du style.
  Nous utilisons Bootstrap pour arranger notre formulaire.
  Qu'est qu'un formulaire sans style !?

.callout.is-important
  header Les Formulaires D'Angular N'Ont Pas Besoin De Librairies
  :marked
    Angular n'utilise pas les classes `container`, `form-group`, `form-control`, et `btn` ou
    les styles de librairies externe. Les applications Angular peuvent utiliser n'importe quelles librairies CSS
    ... ou aucune.

:marked
  Ajoutons la feuille de style.

ol
  li Ouvrir un terminal sur le dossier racine de l'application et entrer la commande:
    code-example(language="html" escape="html").
      npm install bootstrap --save
  li Ouvrir <code>index.html</code> et importer la feuille de style de bootstrap dans le <code>&lt;head></code>.
      +makeExample('forms/ts/index.html', 'bootstrap')(format=".")
:marked
.l-main-section
:marked
  ## Ajouter les pouvoirs avec ***ngFor**
  Notre héros peut choisir un super pouvoir depuis une liste static des pouvoirs approuvé par l'agence.
  Nous maintenons cette liste dans `HeroFormComponent`.

  Nous allons ajouter un `select` dans notre
  formulaire et lier les options du `select` à la liste des `powers` en utilisant `ngFor`,
  une technique que nous avons déjà vu dans le chapitre [Affichage des Données](./displaying-data.html).

  Ajouter le code HTML suivant *juste en dessous* le groupe *Alter Ego*.
+makeExample('forms/ts/app/hero-form.component.html', 'powers', 'app/hero-form.component.html (excerpt)')(format=".")

:marked
  Nous répétons les balises `<options>` pour chaque pouvoir de la liste des Pouvoirs.
  La variable `p` correspond au pouvoir de chaque itération;
  nous affichons son nom en utilisant la syntaxe d'interpolation avec les doubles accolades.

<a id="ngModel"></a>
.l-main-section
:marked
  ## Binding bidirectionnel avec **ngModel**
  Lancer la démo a cette étape sera décevant.

figure.image-display
  img(src="/resources/images/devguide/forms/hero-form-3.png" width="400px" alt="Early form with no binding")
:marked
  Nous ne voyons pas de données car le `Hero` n'a pas encore été lié.
  Nous avons appris à faire ça lors des chapitres précédents.
  [Affichage des Données](./displaying-data.html) nous a appris à lier des données.
  [User Input](./user-input.html) nous a montré à écouter des événements DOM avec
  le Binding d'Événement et à mettre à jour la propriété d'un composant avec la valeur affiché.

  Nous avons besoin maintenant d'afficher, d'écouter et d'extraire les données en même temps.

  Nous pouvons réutiliser ces techniques pour notre formulaire.
  Nous allons plutôt introduire quelque chose de nouveau, la syntaxe `[(ngModel)]`, elle
  lie notre formulaire au model très simplement.

  Modifier le champs `<input>` pour le "Nom" comme ci-dessous

+makeExample('forms/ts/app/hero-form.component.html', 'ngModel-1','app/hero-form.component.html (excerpt)')(format=".")

.l-sub-section
  :marked
    Nous avons ajouté une interpolation de debug après le champ input,
    nous pouvons donc debugger plus facilement.
    Nous nous laissons une note pour la supprimer plus tard.
    

:marked
  Concentrons nous sur la syntaxe de liaison: `[(ngModel)]="..."`.

  Si nous lançons l'application maintenant et commençons à modifier le champ *Nom*,
  nous verrons nos modifications apparaître à côté
  au niveau du texte interpolé.
  Cela pourrai donner quelque chose comme ça.
figure.image-display
  img(src="/resources/images/devguide/forms/ng-model-in-action.png" width="400px" alt="ngModel in action")
:marked
  Nous pouvons voir clairement le flux aller du champ vers le model et revenir.
  **C'est la liaison bidirectionnelle!**

  Notez que nous avons également ajouter un attribut `name` à notre balise `<input>`. C'est obligatoire lorsque nous utilisons `[(ngModel)]` avec un formulaire, nous pouvons donc facilement faire référence à la valeur dans le formulaire global et sa validité.

  Ajoutons les champs *Alter Ego* et *Hero Power* de la même façon.
  
  Nous supprimons la précédents interpolation de debug
  et ajoutons la propriété `diagnostic` en haut du formulaire.
  Nous pourrons donc confirmer que la liaison bidirectionnelle fonctionne *pour le modèle Hero*.

  Notre formulaire devrais être assemblé à trois `[(ngModel)]`,
  comme ceci :

+makeExample('forms/ts/app/hero-form.component.html', 'ngModel-2', 'app/hero-form.component.html (excerpt)')

:marked
  Si nous lançon l'application et modifions chaque propriété du modèle Hero, le formulaire ressemblera à ça:
figure.image-display
  img(src="/resources/images/devguide/forms/ng-model-in-action-2.png" width="400px" alt="ngModel in super action")
:marked
  L'interpolation `diagnostic` en haut du formulaire
  confirme que tous les changements sont reporter au modèle.

  **Supprimer** l'interpolation `{{diagnostic}}` du haut puisque qu'on a confirmé la liaison bidirectionnelle.

.l-sub-section
  :marked
    ### Fonctionnement interne de [(ngModel)]
    *Cette section sur [(ngModel)] est optionnelle. Pas intéressé(e)? Sautez cette section!*
    
    La syntaxe de liaison, <span style="font-family:courier"><b>[()]</b></span>, peut nous donner une idée sur ce qui ce passe.

    Dans un Binding de Propriété, une valeur se déplace du modèle à une propriété cible sur l'écran.
    Nous identifions cette propriété cible en entourant son nom entre crochets, <span style="font-family:courier"><b>[]</b></span>.
    C'est la liaison unidirectionnelle **du modèle à la vue**.

    Dans le Binding d'Événement, nous déplaçons la valeur de la propriété cible sur l'écran vers le modèle.
    Nous identifions cette propriété cible en entourant son nom entre parenthèses, <span style="font-family:courier"><b>()</b></span>.
    C'est la liaison unidirectionnelle dans le sens opposé **de la vue au modèle**.

    C'est donc normal que Angular choisi de combiner les ponctuations comme ceci <span style="font-family:courier"><b>[()]</b></span>
    pour faire une liaison bidirectionnelle et **déplacer la donnée dans les deux sens**.

    En fait, nous pouvons séparer la liaison de `Ng model` en deux modes distinct
    comme décrit ci-dessous avec la liaison du `<input>` "Name":
  +makeExample('forms/ts/app/hero-form.component.html', 'ngModel-3','app/hero-form.component.html (excerpt)')(format=".")

  :marked
    <br>Le Binding de Propriété devrait être familier. Le Binding d'Événement peut paraître étrange.

    Le `ngModelChange` n'est pas un événement de l'élément `input`.
    C'est en fait une propriété d'événement de la directive `NgModel`.
    Quand Angular voit une cible de liaison sous la forme <span style="font-family:courier">[(x)]</span>,
    Il s'attend à ce que la directive `x` ai une propriété d'entrée `x` et une propriété de sortie `xChange`.

    L'autre singularité est l'expression, `model.name = $event`.
    Nous avons l'habitude de voir un objet `$event` provenant d'un événement DOM.
    Le propriété `ngModelChange` ne produit pas d'événement DOM; c'est une propriété d'`EventEmitter` d'Angular
    qui retourne la valeur d'entrée quand il se déclenche &mdash; Ce qui est précisément ce que
    nous devrons assigner à la propriété `name` du model.

    Bon à savoir, mais est-ce pratique? La plupart du temps, nous préférerons utiliser `[(ngModel)]`.
    Nous pourrons séparer la liaison bidirectionnelle si nous avons des choses spéciales à faire dans
    la gestion des événements tel que du debounce ou pour limiter le nombre d'événement mettant à jour le modèle.

    Vous pouvez en apprendre plus sur `NgModel` et sur d'autres syntaxe de liaison dans le 
    chapitre [Syntaxe de Template](./template-syntax.html).

.l-main-section
:marked
  ## Traquer les changements et la validité avec **ngModel**

  Faire un formulaire ne se résume pas par faire la liaison des données. Nous voulons aussi savoir l'état des champs du formulaire

  L'utilisation `ngModel` dans un formulaire nous offre plus que juste la liaison bidirectionnelle. Il est aussi possible de savoir quand un utilisateur touche un champ, si une valeur a changé, ou si une valeur est devenu invalide.

  `ngModel` ne se contente pas de suivre l'état d'un valeur; Il met à jour le champ avec une spéciale classe CSS d'Angular.
  Nous pouvons utilise ces noms de classes pour changer le style des 
  champs et afficher ou supprimer des messages.

  Nous allons explorer ces aspects bientôt. Maintenant
  faisons en sorte que nous avons bien `ngModel` et le nom de l'attribut correspondant dans chaque champs du formulaire,
  commençons par le champ *Name*.
+makeExample('forms/ts/app/hero-form.component.html', 'ngModelName-1', 'app/hero-form.component.html (excerpt)')(format=".")
:marked
  Nous initialisons l'attribut `name` à "name" ce qui est logique pour notre application. N'importe quelle valeur unique fera l'affaire.

.l-sub-section
  :marked
    Intérieurement Angular crée des `FormControls` et les enregistrent avec une directive `NgForm` que Angular attache à la balise `<form>`. Chaque `FormControl` est enregistré sous le nom que nous avons assigné à l'attribut `name`.
    Nous parlerons de `NgForm` [plus loin dans chapitre](#ngForm).

.l-main-section
:marked
  ## Ajouter du CSS Personnalisé pour un Retour Visuel

  La directive *NgModel* ne traque pas seulement l'état. 
  Il met à jour les champs du formulaire avec trois classes qui représente l'état.
  
table
  tr
    th État
    th Classe si vrai
    th Classe si faux
  tr
    td Le champ a été sélectionné
    td <code>ng-touched</code>
    td <code>ng-untouched</code>
  tr
    td La valeur du champ a changé
    td <code>ng-dirty</code>
    td <code>ng-pristine</code>
  tr
    td La valeur du champ est valide
    td <code>ng-valid</code>
    td <code>ng-invalid</code>
:marked
  Ajoutons une [référence de template](./template-syntax.html#ref-vars) temporaire appelé **spy**
  à la balise `<input>` "Name" et utilisons le spy pour afficher ces classes.

+makeExample('forms/ts/app/hero-form.component.html', 'ngModelName-2','app/hero-form.component.html (excerpt)')(format=".")

:marked
  Maintenant lancez l'application et sélectionnez le champ *Name*.
  Suivre *précisément* ces quatre étapes

  1. Regardez le champ sans le toucher
  1. Sélectionnez puis désélectionnez le champ
  1. Ajoutez des slaches à la fin du nom
  1. Supprimez le nom

  Ci dessous, les actions et les effets sur les classes:
figure.image-display
  img(src="/resources/images/devguide/forms/control-state-transitions-anim.gif"  alt="Control State Transition")
:marked
  Nous devrons voir les quatre ensemble de noms de classes et leur transitions:
figure.image-display
  img(src="/resources/images/devguide/forms/ng-control-class-changes.png" width="400px" alt="Control State Transitions")

:marked
  La pair (`ng-valid` | `ng-invalid`) est la plus intéressante pour nous. Nous voulons afficher
  un retour visuel lorsque la donnée est invalide et également souligner les champs obligatoires.

  Nous pouvons faire les deux en même temps avec la barre coloré à gauche du champ:

figure.image-display
  img(src="/resources/images/devguide/forms/validity-required-indicator.png" width="400px" alt="Invalid Form")

:marked
  Pour afficher ces retours visuels, nous ajoutons deux styles dans un nouveau fichier `forms.css`
  que nous ajoutons à l'`index.html`.

+makeExample('forms/ts/forms.css',null,'forms.css')(format=".")
:marked
  Ces styles ciblent les deux classes de validité Angular et l'attribut HTML5 "required".

  Nous mettons à jour le `<head>` du `index.html` pour inclure la feuille de style.
+makeExample('forms/ts/index.html', 'styles', 'index.html (excerpt)')(format=".")
:marked
  ## Afficher et Masquer les Messages d'Erreurs

  Nous pouvons faire mieux.

  Le champ "Name" est obligatoire. Vider ce champ reviens à afficher la barre rouge. Ceci dit que *quelque chose* ne va pas mais nous
  ne savons pas *quoi* ou que faire de cette erreur.
  Nous pouvons tirer parti de la classe `ng-invalid` pour afficher un message d'erreur.

  Voici comment nous afficherons le message su l'utilisateur vide le champ nom:
figure.image-display
  img(src="/resources/images/devguide/forms/name-required-error.png" width="400px" alt="Name required")

:marked
  Pour réaliser ceci, nous allons étendre la balise `<input>` avec
  1. une [référence de template](./template-syntax.html#ref-vars)
  1. Le message "*is required*" proche du `<div>` sera affiché uniquement si le champ est invalide.

  Voici comment on fait pou le champ *name*:
+makeExample('forms/ts/app/hero-form.component.html', 
  'name-with-error-msg', 
  'app/hero-form.component.html (excerpt)')(format=".")
:marked
  Nous avons besoin d'une référence de modèle pour accéder au champ depuis le template.
  Ici, nous avons créé une variable `name` initialisé à la valeur "ngModel".
.l-sub-section
  :marked
    Pourquoi "ngModel"? 
    Une propriété de directive [exportAs](../api/core/index/DirectiveMetadata-class.html#!#exportAs-anchor)
    dit à Angular comment faire le lien entre la référence et la directive
    Nous initialisons `name` à `ngModel` parce que  la propriété `exportAs` de la directive `ngModel` se trouve être "ngModel".

    Maintenant nous pouvons contrôler l'affichage du message d'erreur "name" en liant la propriété du champ `name` à la propriété `hidden` de l'élément `<div>` du message.
+makeExample('forms/ts/app/hero-form.component.html', 
  'hidden-error-msg', 
  'app/hero-form.component.html (excerpt)')
:marked
  Dans cette exemple, nous masquons le message quand le champ est valide ou inchangé;
  Un champ est inchangé si l'utilisateur n'a pas changé sa valeur depuis que le formulaire a été affiché.
  
  Cette expérience utilisateur est le choix du développeur. D'autres personnes voudrons voir les messages tout le temps. 
  Si nous ignorons l'état `pristine`, nous masquerons le message seulement quand le champ est valide.
  Si nous arrivons sur le formulaire avec un Hero vide ou invalide,
  nous verrons directement les messages d'erreurs.
   
  Certaines personnes trouverons ce comportement déconcertant. Ils voudrons voir le message seulement quand l'utilisateur fait de mauvais changement.
  En masquant le message tant que le champ est "inchangé", nous atteignons cette objectif.
  Nous verrons l'importance de ce choix lorsque nous [ajouterons un nouveau Hero](#new-hero) au formulaire.

  L'*Alter Ego* du Hero est optionnel nous pouvons donc le laisser tel quel.

  La sélection du *Power* du Hero est obligatoire.
  Nous pouvons ajouter la même gestion d'erreur au `<select>` si nous voulons
  mais ce n'est pas une obligation puisque la contrainte de sélection du
  pouvoir est déjà valide.
  
<a id="new-hero"></a>
<a id="reset"></a>  
.l-main-section
:marked
  ## Ajouter un héros et réinitialiser le formulaire 
  Nous voulons ajouter un nouveau héros dans ce formulaire. 
  Nous ajoutons un bouton "New Hero" en bas du formulaire et lions l'événement click du bouton à une méthode du composant.
+makeExample('forms/ts/app/hero-form.component.html', 
  'new-hero-button', 
  'app/hero-form.component.html (New Hero button)')
:marked
+makeExample('forms/ts/app/hero-form.component.ts', 
  'new-hero-v1', 
  'app/hero-form.component.ts (New Hero method - v1)')(format=".")
:marked
  Relancer l'application, cliquer sur le bouton *New Hero*, et le formulaire s'efface. 
  Les barres gauche sont rouges, indiquant l'invalidité des propriétés `name` et `power`.
  C'est compréhensible puisque ce sont des champs obligatoires.
  Les messages d'erreurs sont masqués parce que le formulaire est inchangé; aucun changement n'a été fait.
  
  Entrez un nom et cliquez encore sur *New Hero*.
  Maintenant nous voyons un message d'erreur! Pourquoi? Nous ne voulons pas afficher de message tant que nous affichons un nouveau héros (vide).
  
  En inspectant l'élément, nous verrons que le champ *name* n'est plus inchangé.
  Le remplacement du héros *ne restaure pas l'état inchangé* du champ.
.l-sub-section
  :marked
    Après réflexion, nous réalisons qu'Angular ne peut pas distinguer
    le remplacement d'un héros et la suppression de la propriété `name` programmatiquement.
    Angular ne fait aucune hypothèse et laisse le champ dans son état actuel, l'état changé.
:marked
  Nous devons réinitialiser le formulaire manuellement grâce à une petite astuce.
  Nous ajoutons un identifiant `active` au composant, initialisé à `true`. Lorsque nous ajoutons un nouveau héros,
  nous basculons `active` à false puis nous le remettons immédiatement à true avec un `setTimeout`.
+makeExample('forms/ts/app/hero-form.component.ts', 
  'new-hero', 
  'app/hero-form.component.ts (New Hero method - final)')(format=".")
:marked
  Ensuite nous lions les éléments du formulaire à l'identifiant `active`.
+makeExample('forms/ts/app/hero-form.component.html', 
  'form-active', 
  'app/hero-form.component.html (Form tag)')
:marked
  Avec `NgIf` attaché à l'identifiant `active`,
  en cliquant sur "New Hero" nous supprimons le formulaire du DOM et e, créons un nouveau en un clin d'oeil.
  Le nouveau formulaire est dans un état inchangé. Le message d'erreur est masqué.
.l-sub-section
  :marked
    C'est une solution de contournement temporaire le temps d'avoir une fonctionnalité correct de remise à zéro d'un formulaire.
:marked
  
.l-main-section
:marked
  ## Soumettre le formulaire avec **ngSubmit**
  L'utilisateur doit pouvoir soumettre ce formulaire après l'avoir rempli.
  Le bouton de soumission en bas du formulaire
  ne fait rien pour l'instant mais il va
  déclencher une soumission de formulaire grâce à son type (`type="submit"`).

  Une "soumission de formulaire" est inutile pour l'instant.
  Pour la rendre utile, nous allons mettre à jour la balise `<form>` avec une autre directive d'Angular , `NgSubmit`,
  et la lier à la méthode `HeroFormComponent.submit()` avec une liaison d'événement
+makeExample('forms/ts/app/hero-form.component.html', 'ngSubmit')(format=".")

:marked
  Nous ajoutons quelque chose de supplémentaire à la fin! Nous avons défini une
  référence, **`#heroForm`**, initialisé à "ngForm".

  La variable `heroForm` est maintenant une référence à la directive `NgForm` que contient le formulaire dans son ensemble.
<a id="ngForm"></a>
.l-sub-section
  :marked
    ### La directive NgForm
    Qu'est-ce que la directive `NgForm`? Nous n'avons pas ajouter une directive [NgForm](../api/common/index/NgForm-directive.html)!
    
    Angular l'a fait. Angular crée et attache une directive `NgForm` à la balise `<form>` automatiquement.

    La directive `NgForm` étend la balise `form` avec de nouvelles fonctionnalités.
    Elle contient les champs que nous avons créé pour les éléments avec la directive `ngModel` et l'attribut `name`
    et surveille leurs propriétés ainsi que leur validité.
    Elle a aussi sa propre propriété de validité qui est à true seulement *si chaque 
    champs* est valide.
    
:marked
  Plus bas dans le template, nous lions la propriété `disabled` du bouton à la référence de validité global
  `heroForm`. Voici le code:
+makeExample('forms/ts/app/hero-form.component.html', 'submit-button')
:marked
  Relancer l'application. Le formulaire s'affiche dans un état valide et le bouton est actif.

  Maintenant supprimez le *Name*. Nous transgressons la règle de validité du "name" qui
  est dûment noté dans notre message d'erreur comme avant. Et maintenant le bouton de soumission n'est plus actif.

  Pas impressionné? Pensez y un moment. Que devrions nous faire pour 
  câbler l'état actif/inactif d'un bouton à l'état d'un formulaire sans l'aide d'Angular?

  Pour nous, c'était aussi simple que
  1. Définir une référence de template à l'élément formulaire (amélioré)
  2. Référencé cette variable à un bouton 50 lignes plus bas.

.l-main-section
:marked
  ## Afficher/masquer les zones de formulaire (bonus)
  La soumission du formulaire n'est pas terriblement dramatique pour le moment.
.l-sub-section
  :marked
    Rien de surprenant pour la démo. Pour être honnête,
    jouer avec ne nous apprendra rien de nouveau sur les formulaires.
    Mais c'est une opportunité d'exercer certaines de nos nouvelles
    compétences de liaison.
    Si cela ne vous intéresse pas, you pouvez passer cette conclusion
    vous ne manquerez rien.
:marked
  Faisons quelque chose visuellement étonnant.
  Cachons les zones de saisie et affichons autre chose.

  Commencez par encapsuler le formulaire dans un `<div>` et liez
  ça propriété `hidden` à la propriété `HeroFormComponent.submitted`.

+makeExample('forms/ts/app/hero-form.component.html', 'edit-div', 'app/hero-form.component.html (excerpt)')(format=".")

:marked
  Le formulaire principal est visible depuis le début car la
  propriété `submitted` est à false tant que nous n'avons pas soumis le formulaire,
  comme ce morceau de code nous le rappelle:

+makeExample('forms/ts/app/hero-form.component.ts', 'submitted')(format=".")

:marked
  Lorsque nous cliquons sur le bouton de soumission, l'identifiant `submitted` passe à true et le formulaire disparaît
  comme prévu.

  Nous avons maintenant besoin d'afficher autre chose le temps que le formulaire est en cours de soumission.
  Ajouter le bloc HTML suivant en dessous du conteneur `<div>` que nous venons d'écrire:
+makeExample('forms/ts/app/hero-form.component.html', 'submitted', 'app/hero-form.component.html (excerpt)')

:marked
  Voici notre héros de nouveau, affiché en lecture seule avec la liaison d'interpolation.
  Ce morceau de HTML s'affiche uniquement tant que le composant est en cours de soumission.

  Nous avons ajouter un bouton Edit qui a son événement click lié à une expression
  qui remet à false l'identifiant `submitted`.

  Lorsque nous cliquons dessus, ce bloque disparaît et le formulaire apparaît.

  Voici tous ce que nous pouvons faire pour l'instant.

.l-main-section
:marked
  ## Conclusion

  Les formulaires d'Angular 2 vus dans ce chapitre prend avantage des fonctionnalités du framework pour faciliter la modification des données, la validation et plus:

  - Un template HTML de formulaire Angular.
  - Un composant de formulaire avec le décorateur `Component`.
  - La directive `ngSubmit` pour gérer la soumission du formulaire.
  - Des références de template comme `#heroForm`, `#name`, `#alter-ego` et `#power`.
  - La syntaxe `[(ngModel)]` pour la liaison bidirectionnelle, la validation et le suivi des modification.
  - La propriété `valid` de la référence de template des champs pour vérifier su un champ est valide et afficher/masquer des message d'erreurs.
  - Contrôler l'état du bouton de soumission en se liant à la validité de `NgForm`.
  - Des classes CSS personnalisés pour apporter un retour visuel sur les champs non valides.

  Voici la structure final de notre projet :
.filetree
  .file angular2-forms
  .children
    .file app
    .children
      .file app.component.ts
      .file hero.ts
      .file hero-form.component.html
      .file hero-form.component.ts
      .file main.ts
    .file node_modules ...
    .file typings ...      
    .file index.html
    .file package.json
    .file tsconfig.json
    .file typings.json
:marked
  Ici la version finale des sources:

+makeTabs(
  `forms/ts/app/hero-form.component.ts,
   forms/ts/app/hero-form.component.html,
   forms/ts/app/hero.ts,
   forms/ts/app/app.component.ts,
   forms/ts/app/main.ts,   
   forms/ts/index.html,
   forms/ts/forms.css`,
  'final, final,,,,,',
  `hero-form.component.ts,
   hero-form.component.html,   
   hero.ts,
   app.component.ts,
   main.ts,
   index.html,
   forms.css`)
:marked

include ../_util-fns

:marked
  # It Takes Many Heroes
  
  # Nous voulons plus de super-héros
  
  Our story needs more heroes.
  We’ll expand our Tour of Heroes app to display a list of heroes,
  allow the user to select a hero, and display the hero’s details.
  
  Notre projet nécessite plus de héros. Nous allons donc modifier l'application afin
  d'afficher une liste de héros, permettant ainsi à l'utilisateur
  d'en sélectionner un et de visualiser ses caractéristiques.

  Run the <live-example></live-example> for this part.
  
  Exécutez la <live-example>démo</live-example> correspondante à cette partie.

  Let’s take stock of what we’ll need to display a list of heroes.
  First, we need a list of heroes. We want to display those heroes in the view’s template,
  so we’ll need a way to do that.
  
  Alors, regardons de quoi avons nous besoin.
  Tout d'abord il nous faut une liste de héros que nous souhaitons afficher dans le template de la vue.
  Alors commencons par cela.

.l-main-section
:marked
  ## Where We Left Off
  
  ## Ou nous étions-nous arrêtés ?
  
  Before we continue with Part 2 of the Tour of Heroes,
  let’s verify we have the following structure after [Part 1](./toh-pt1.html).
  If not, we’ll need to go back to Part 1 and figure out what we missed.

  Avant de continuer cette deuxième partie de notre Guide des Héros,
  vérifiez que vous avez bien la structure suivante suite à la réalisation de [la partie 1](./toh-pt1.html).
  Si ce n'est pas le cas, retournez à l'étape précédente pour identifier ce qui a été oublié.

  
.filetree
  .file angular2-tour-of-heroes
  .children
    .file app
    .children
      .file app.component.ts
      .file main.ts
    .file node_modules ...
    .file typings ...      
    .file index.html
    .file package.json
    .file styles.css
    .file systemjs.config.js
    .file tsconfig.json
    .file typings.json
:marked
  ### Keep the app transpiling and running
  
  ### Laissons l'application tourner
  
  We want to start the TypeScript compiler, have it watch for changes, and start our server. We'll do this by typing
  
  Nous souhaitons démarrer notre compilateur TypeScript, observer les changements de code et démarrer notre serveur. Pour cela tapez la commande

code-example(language="bash").
  npm start

:marked
  This will keep the application running while we continue to build the Tour of Heroes.

  Cette commande s'assure que l'application s'exécute pendant que nous travaillons sur notre Guide des Héros.
  
.l-main-section
:marked
  ## Displaying Our Heroes
  
  ## Affichons nos héros
  
  
  ### Creating heroes
  
  ### Créons ses héros
  
  Let’s create an array of ten heroes at the bottom of `app.component.ts`.
  
  Commençons par créer un tableau de dix héros dans notre fichier `app.component.ts`.

+makeExample('toh-2/ts/app/app.component.ts', 'hero-array', 'app.component.ts (hero array)')

:marked
  The `HEROES` array is of type `Hero`, the class defined in part one, 
  to create an array of heroes.
  We aspire to fetch this list of heroes from a web service, but let’s take small steps
  first and display mock heroes.
  
  Le tableau `HEROES` est de type `Hero`, cette classe que nous avions définie dans la première partie. 
  Nous voulons à terme récupérer cette liste d'un web service, mais avançons progressivement et commençons avec
  un tableau de fausses données.

  ### Exposing heroes
  
  ### Exposons ces héros
  
  Let’s create a public property in `AppComponent` that exposes the heroes for binding.
  
  Créez une propriété publique sur le `AppComponent` qui expose les héros pour le binding.
  
+makeExample('toh-2/ts-snippets/app.component.snippets.pt2.ts', 'hero-array-1', 'app.component.ts (hero array property)')

:marked
  We did not have to define the `heroes` type.  TypeScript can infer it from the `HEROES` array.
  
  Vous n'avez pas a préciser le type de cette propriété `heroes`.  TypeScript peut le retrouver à partir de celui du tableau `HEROES`.
.l-sub-section
  :marked
    We could have defined the heroes list here in this component class.
    But we know that ultimately we’ll get the heroes from a data service.
    Because we know where we are heading, it makes sense to separate the hero data
    from the class implementation from the start.
    
    Nous aurions pu définir la liste de héros directement dans le composant.
    Mais nous savons que cette liste proviendra ultérieurement d'un service.
    Et comme nous gardons cet objectif en vue, il est donc pertinent de séparer les données de 
    l'implémentation du composant dès le départ.
:marked
  ### Displaying heroes in a template
  
  ### Affichons les héros dans le template
  
  Our component has `heroes`. Let’s create an unordered list in our template to display them.
  We’ll insert the following chunk of HTML below the title and above the hero details.
  
  Notre composant a maintenant des héros. Nous allons créer une liste non ordonnée dans notre template pour les afficher.
  Insérez le code HTML ci-dessous entre le titre et la section de détail d'un héros.

+makeExample('toh-2/ts-snippets/app.component.snippets.pt2.ts', 'heroes-template-1', 'app.component.ts (heroes template)')

:marked
  Now we have a template that we can fill with our heroes.
  
  Nous avons maintenant un template que nous allons pouvoir remplir de héros.

  ### Listing heroes with ngFor
  
  ### Listons les héros avec la directive ngFor

  We want to bind the array of `heroes` in our component to our template, iterate over them,
  and display them individually.
  We’ll need some help from Angular to do this. Let’s do this step by step.
  
  Nous voulons associer le tableau `heroes` de notre composant avec le template, itérer dessus,
  et afficher chaque héros individuellement.
  Nous allons avoir besoin d'un peu d'aide de la part d'Angular pour cela. Alors commençons petit à petit.

  First modify the `<li>` tag by adding the built-in directive `*ngFor`.
  
  Premièrement modifiez la balise `<li>` en lui ajoutant la directive native `*ngFor`.

+makeExample('toh-2/ts-snippets/app.component.snippets.pt2.ts', 'heroes-ngfor-1', 'app.component.ts (ngFor)')

.alert.is-critical
  :marked
    The leading asterisk (`*`) in front of `ngFor` is a critical part of this syntax.
    
    L'astérisque (`*`) située devant `ngFor` fait partie intégrante de la syntaxe.

.l-sub-section
  :marked
    The (`*`) prefix to `ngFor` indicates that the `<li>` element and its children
    constitute a master template.
    
    Le symbole (`*`) devant `ngFor` indique que la balise `<li>` et ces enfants
    constituent en fait un template.

    The `ngFor` directive iterates over the `heroes` array returned by the `AppComponent.heroes` property
    and stamps out instances of this template.
    
    La directive `ngFor` itère sur le tableau `heroes` de la propriété `AppComponent.heroes`
    et ajoute les différentes instances du template

    The quoted text assigned to `ngFor` means
    “*take each hero in the `heroes` array, store it in the local `hero` variable,
    and make it available to the corresponding template instance*”.
    
    Le texte associé à `ngFor` signifie 
    “*qu'il faut prendre chaque héros du tableau `heroes`, 
    le mettre dans la variable locale `hero`, et le rendre disponible pour l'instance de template correspondante*”.
                
    The `let` keyword before "hero" identifies `hero` as a template input variable.
    We can reference this variable within the template to access a hero’s properties.

    Le mot clé `let` avant "hero" définit `hero` comme une variable de template.
    Nous pouvons alors l'utiliser pour accéder aux propriétés de notre héros.

    Learn more about `ngFor` and template input variables in the
    [Displaying Data](../guide/displaying-data.html#ngFor) and
    [Template Syntax](../guide/template-syntax.html#ngFor) chapters.
    
    Apprenez-en plus sur la directive `ngFor` et les variables de template
    dans les chapitres [Afficher des données](../guide/displaying-data.html#ngFor) et
    [Syntaxe de Template](../guide/template-syntax.html#ngFor).

:marked
  Now we insert some content between the `<li>` tags
  that uses the `hero` template variable to display the hero’s properties.
  
  Nous pouvons maintenant insérer du contenu dans les balises `<li>`
  en utilisant la variable de template `hero` pour afficher les propriétés d'un héros.

+makeExample('toh-2/ts-snippets/app.component.snippets.pt2.ts', 'ng-for', 'app.component.ts (ngFor template)')(format=".")

:marked
  When the browser refreshes, we see a list of heroes!
  
  Au rafraîchissement du navigateur nous avons maintenant une liste de héros&nbsp;!

  ### Styling our heroes
  
  ### Un peu de style pour nos héros 
  
  Our list of heroes looks pretty bland.
  We want to make it visually obvious to a user which hero we are hovering over and which hero is selected.

  Notre liste de héros est plutôt basique.
  Nous voulons maintenant mettre en évidence le héros survolé par la souris et celui qui sera sélectionné.
  
  Let’s add some styles to our component by setting the `styles` property on the `@Component` decorator
  to the following CSS classes:

  Ajoutons un peu de style à notre composant en initialisant la propriété `styles` de notre decorateur `@Component`
  avec les classes CSS ci-dessous.

+makeExample('toh-2/ts/app/app.component.ts', 'styles', 'app.component.ts (styles)')(format=".")

:marked
  Notice that we again use the back-tick notation for multi-line strings.
  
  Notez que nous utilisons à nouveau la notation back-tick pour faire des chaînes multi-lignes.

  That's a lot of styles! We can put them inline as shown here, or we can move them out to their own file which will make it easier to code our component. 
  We'll do this in a later chapter. For now let's keep rolling.

  Ok ca fait beaucoup de style&nbsp;! Nous pouvons les mettre directement de cette façon, mais nous pouvons également les ajouter dans un fichier séparé ce qui facilitera le code de notre composant.
  Nous ferons cela dans un prochain chapitre. Allez on continue.
  
  When we assign styles to a component they are scoped to that specific component.
  Our styles will only apply to our `AppComponent` and won't "leak" to the outer HTML.

  Lorsque nous assignons un style à un composant, il reste uniquement lié à ce composant.
  Notre style s'appliquera uniquement à notre `AppComponent` et il n'y aura pas d'effets de bords dans le reste du HTML.

  Our template for displaying the heroes should now look like this:

  Notre template pour afficher les héros ressemble alors à&nbsp;:
  
+makeExample('toh-2/ts-snippets/app.component.snippets.pt2.ts', 'heroes-styled', 'app.component.ts (styled heroes)')

.l-main-section
  :marked
    ## Selecting a Hero
    
    ## Sélectionner un héros
    
    We have a list of heroes and we have a single hero displayed in our app.
    The list and the single hero are not connected in any way.
    We want the user to select a hero from our list, and have the selected hero appear in the details view.
    This UI pattern is widely known as "master-detail".
    In our case, the master is the heroes list and the detail is the selected hero.
    
    Alors nous avons maintenant une liste de héros et un héros affiché.
    Mais ces deux éléments ne sont pour le moment pas reliés.
    Nous voulons que l'utilisateur sélectionne un héros dans la liste et que ça soit ce héros qui apparaisse alors dans la vue de détail.
    Ce pattern d'interface est appelé "mmaître/détail".
    Dans notre cas le maître est la liste de héros et le détail est le héros sélectionné.

    Let’s connect the master to the detail through a `selectedHero` component property bound to a click event.
    
    Connectons-les en utilisant une propriété `selectedHero` sur notre composant liée à un événement de clic.

    ### Click event
    
    ### Evènement de clic
    
    We modify the `<li>` by inserting an Angular event binding to its click event.

    Modifiez la balise `<li>` en ajoutant un binding d'événement Angular sur le clic.
    
  +makeExample('toh-2/ts-snippets/app.component.snippets.pt2.ts', 'selectedHero-click', 'app.component.ts (template excerpt)')

  :marked
    Focus on the event binding
    
    Un point sur le binding d'événement
    
  code-example(format="." language="bash").
    (click)="onSelect(hero)"
  :marked
    The parenthesis identify the `<li>` element’s  `click` event as the target.
    The expression to the right of the equal sign calls the  `AppComponent` method, `onSelect()`,
    passing the template input variable `hero` as an argument.
    That’s the same `hero` variable we defined previously in the `ngFor`.
    
    Les parenthèses indiquent que la cible sera un événement clic sur l'élément `<li>`.
    L'expression à droite du symbole égal appelle la méthode `onSelect()` de notre `AppComponent`
    en lui passant en argument la variable de template `hero`. 
    Il s'agit de la même variable `hero` définie précédemment  dans la directive `ngFor`.
  .l-sub-section
    :marked
      Learn more about Event Binding in the 
      [User Input](../guide/user-input.html) and
      [Templating Syntax](../guide/template-syntax.html#event-binding) chapters.
      
      Apprenez en plus sur le binding d'événement dans les chapitres
      [Actions utilisateurs](../guide/user-input.html) et
      [Syntaxe de Template](../guide/template-syntax.html#event-binding).
  :marked
    ### Add the click handler
    
    ### Ajoutons un écouteur d'événement
    
    Our event binding refers to an `onSelect` method that doesn’t exist yet.
    We’ll add that method to our component now.

    Notre binding d'événement fait référence à une méthode `onSelect` qui n'existe pas encore.
    Nous allons l'ajouter à notre composant.
    
    What should that method do? It should set the component’s selected hero to the hero that the user clicked.

    Que doit faire cette méthode? Elle doit associer le héros sélectionné de notre composant à celui sur lequel l'utilisateur a cliqué. 

    Our component doesn’t have a “selected hero” yet either. We’ll start there.

    Notre composant n'a pas de “héros sélectionné” pour le moment. Commençons par ça.

    ### Expose the selected hero
    
    ### Exposons un héros sélectionné

    We no longer need the static `hero` property of the `AppComponent`.
    **Replace** it with this simple `selectedHero` property:
    
    Nous n'avons plus besoin de la propriété statique `hero` dans notre `AppComponent`.
    **Remplaçons** la par une propriété `selectedHero`&nbsp;:

  +makeExample('toh-2/ts/app/app.component.ts', 'selected-hero', 'app.component.ts (selectedHero)')

  :marked
    We’ve decided that none of the heroes should be selected before the user picks a hero so
    we won’t initialize the `selectedHero` as we were doing with `hero`.
    
    Il n'y aura pas de héros sélectioné par défaut, avant que l'utilisateur en choisisse un.
    Ainsi nous n'initialiserons pas la propriété `selectedHero` comme nous l'avions fait avec `hero`.

    Now **add an `onSelect` method** that sets the `selectedHero` property to the `hero` the user clicked.
    
    Maintenant **ajoutez une méthode `onSelect`** qui positionne dans la propriété `selectedHero` le `hero` sur lequel l'utilisateur a cliqué.
    
  +makeExample('toh-2/ts/app/app.component.ts', 'on-select', 'app.component.ts (onSelect)')

  :marked
    We will be showing the selected hero's details in our template.
    At the moment, it is still referring to the old `hero` property.
    Let’s fix the template to bind to the new `selectedHero` property.
    
    Nous allons afficher les caractéristiques de ce héros sélectionné dans notre template.
    Actuellement, il fait encore référence à l'ancienne propriété `hero`.
    Modifions le template pour utiliser maintenant la propriété `selectedHero`.

  +makeExample('toh-2/ts-snippets/app.component.snippets.pt2.ts', 'selectedHero-details', 'app.component.ts (template excerpt)')
  :marked
    ### Hide the empty detail with ngIf
    
    ### Masquons la vue de détail vide avec la directive ngIf

    When our app loads we see a list of heroes, but a hero is not selected.
    The `selectedHero` is `undefined`.
    That’s why we'll see the following error in the browser’s console:
    
    Lorsque notre application se charge, nous voyons une liste de héros mais aucun n'est sélectioné. 
    La propriété `selectedHero` est `undefined`.
    C'est pour cela que nous avons l'erreur suivante dans la console de notre navigateur&nbsp;:

  code-example(language="html").
    EXCEPTION: TypeError: Cannot read property 'name' of undefined in [null]

  :marked
    Remember that we are displaying `selectedHero.name` in the template.
    This name property does not exist because `selectedHero` itself is undefined.
    
    Rappelez-vous que nous faisons référence à `selectedHero` dans notre template.
    La propriété name n'existe pas dans la mesure ou la propriété `selectedHero` est elle même indéfinie.

    We'll address this problem by keeping the hero detail out of the DOM until there is a selected hero.

    Nous allons résoudre ce problème en excluant du DOM la section de détail tant qu'il n'y a a pas de héros sélectioné.
    
    We wrap the HTML hero detail content of our template with a `<div>`.
    Then we add the `ngIf` built-in directive and set it to the `selectedHero` property of our component.

    Nous allons encadrer le contenu HTML correspondant au détail du héros dans une balise `<div>`. 
    Nous allons ensuite ajouter la directive native `ngIf` et lui attribuer la propriété `selectedHero` de notre composant.
  +makeExample('toh-2/ts-snippets/app.component.snippets.pt2.ts', 'ng-if', 'app.component.ts (ngIf)')

  .alert.is-critical
    :marked
      Remember that the leading asterisk (`*`) in front of `ngIf` is
      a critical part of this syntax.
      
      Rappelez vous que l'asterisque (`*`) devant `ngIf` fait partie intégrante de la syntaxe.
  :marked
    When there is no `selectedHero`, the `ngIf` directive removes the hero detail HTML from the DOM.
    There will be no hero detail elements and no bindings to worry about.
    
    Quand il n'y a pas de `selectedHero`, la directive `ngIf` supprime du DOM le HTML correspondant au détail d'un héros.
    Il n'y aura alors plus de soucis de binding.

    When the user picks a hero, `selectedHero` becomes "truthy" and
    `ngIf` puts the hero detail content into the DOM and evaluates the nested bindings.
    
    Quand l'utilisateur sélectionne un héros, la propriété `selectedHero` devient "vrai" et 
    la directive `ngIf` ajoute au DOM le HTML correspondant au détail d'un héros et évalue les bindings imbriqués.
  .l-sub-section
    :marked
      `ngIf` and `ngFor` are called “structural directives” because they can change the
      structure of portions of the DOM.
      In other words, they give structure to the way Angular displays content in the DOM.
      
      Les directives `ngIf` et `ngFor` sont appelées des “directives structurelles” car elles altèrent
      la structure d'une portion du DOM. 
      En d'autres termes, elles indiquent à Angular la façon d'afficher du contenu dans le DOM.

      Learn more about `ngIf`, `ngFor` and other structural directives in the
      [Structural Directives](../guide/structural-directives.html) and
      [Template Syntax](../guide/template-syntax.html#directives) chapters.
      
      Apprenez en plus sur les directives `ngIf`, `ngFor` et les autres directives structurelles dans les chapitres
      [Directives Structurelles](../guide/structural-directives.html) et
      [Syntaxe de Template](../guide/template-syntax.html#directives).

  :marked
    The browser refreshes and we see the list of heroes but not the selected hero detail.
    The `ngIf` keeps it out of the DOM as long as the `selectedHero` is undefined.
    When we click on a hero in the list, the selected hero displays in the hero details.
    Everything is working as we expect.
    
    La page se recharge et nous avons maintenenant notre liste de héros, sans le détail du héros sélectionné.
    La directive `ngIf` maintient le DOM vide tant que la propriété `selectedHero` est indéfinie.
    Lorsque nous cliquons sur un héros de la liste, il apparaît dans la section détail.
    Tout fonctionne comme prévu.

    ### Styling the selection
    
    ### Un peu de style sur la sélection

    We see the selected hero in the details area below but we can’t quickly locate that hero in the list above.
    We can fix that by applying the `selected` CSS class to the appropriate `<li>` in the master list.
    For example, when we select Magneta from the heroes list,
    we can make it pop out visually by giving it a subtle background color as shown here.

    Nous pouvons effectivement observer le détail du héros sélectionné mais il n'y a rien qui le représente facilement 
    pour le repérer dans la liste.
    Nous allons y remédier en ajoutant la classe CSS `selected` à la balise `<li>` correspondante.
    Par exemple, si nous sélectionnons Magneta dans la liste
    nous pouvons le faire ressortir en ajoutant une couleur de fond comme représenté ci-dessous. 
    
  figure.image-display
    img(src='/resources/images/devguide/toh/heroes-list-selected.png' alt="Selected hero")
  :marked
    We’ll add a property binding on `class` for the `selected` class to the template. We'll set this to an expression that compares the current `selectedHero` to the `hero`.
    
    Nous allons ajouter un binding de propriété sur `class` pour ajouter ou enlever la classe `selected` dans le template.
    Nous allons faire référence à une expression qui compare la valeur courante de `selectedHero` à celle de `hero`.

    The key is the name of the CSS class (`selected`). The value is `true` if the two heroes match and `false` otherwise.
    We’re saying “*apply the `selected` class if the heroes match, remove it if they don’t*”.
    
    La clé est le nom de la classe CSS (`selected`). Si les deux  héros sont identiques, la valeur est `true`  sinon elle est `false`.
    Nous sommes en train de dire “*applique la classe `selected` si les deux  héros sont les mêmes, sinon supprime là*”.
  +makeExample('toh-2/ts-snippets/app.component.snippets.pt2.ts', 'class-selected-1', 'app.component.ts (setting the CSS class)')(format=".")
  :marked
    Notice in the template that the `class.selected` is surrounded in square brackets (`[]`).
    This is the syntax for a **property binding**, a binding in which data flows one way
    from the data source (the expression `hero === selectedHero`) to a property of `class`.
  
    Notez que dans le template, `class.selected` est entouré de crochets (`[]`).
    Il s'agit de la syntaxe utilisée pour le  **binding de propriété**, un binding qui se propage dans un seul sens 
    de la source de donnée (l'expression `hero === selectedHero`) à la propriété `class`.
    
  +makeExample('toh-2/ts-snippets/app.component.snippets.pt2.ts', 'class-selected-2', 'app.component.ts (styling each hero)')(format=".")

  .l-sub-section
    :marked
      Learn more about [property bindings](../guide/template-syntax.html#property-binding)
      in the Template Syntax chapter.

      Apprenez en plus sur les [binding de propriété](../guide/template-syntax.html#property-binding)
      dans le chapitre sur la Syntaxe de Template.
  :marked
    The browser reloads our app.
    We select the hero Magneta and the selection is clearly identified by the background color.

    La navigateur recharge notre application.
    Nous sélectionnons le héros Magneta et cette sélection est clairement identifiée par une couleur de fond.
  figure.image-display
    img(src='/resources/images/devguide/toh/heroes-list-1.png' alt="Output of heroes list app")

  :marked
    We select a different hero and the tell-tale color switches to that hero.
    
    Si nous choisissons un autre héros, la couleur sera mise à jour.

    Here's the complete `app.component.ts` as it stands now:
    
    Voici ci-dessous la version complète de notre `app.component.ts`&nbsp;:

  +makeExample('toh-2/ts/app/app.component.ts', '', 'app.component.ts')

.l-main-section
:marked
  ## The Road We’ve Travelled
  
  ## Qu'avons nous accompli ?
  
  Here’s what we achieved in this chapter:

  Voici ce que nous avons réalisé dans ce chapitre&nbsp;:
  
  * Our Tour of Heroes now displays a list of selectable heroes
  
  * Notre Guide des Héros affiche maintenant une liste de héros
  
  * We added the ability to select a hero and show the hero’s details
  
  * Nous avons ajouté la possibilité de sélectionner un héros et d'en afficher son détail
    
  * We learned how to use the built-in directives `ngIf` and `ngFor` in a component’s template
  
  * Nous avons appris à utiliser les directives natives `ngIf` et `ngFor` dans le template de notre composant.

  Run the <live-example></live-example> for this part.
  
  Exécutez la <live-example>démo</live-example> correspondante à cette partie.

  ### The Road Ahead
  
  ### Par la suite
  
  Our Tour of Heroes has grown, but it’s far from complete.
  We can't put the entire app into a single component.
  We need to break it up into sub-components and teach them to work together
  as we learn in the [next chapter](toh-pt3.html).

  Notre Guide des Héros a bien évolué, mais il est loin d'être achevé. 
  Nous ne pouvons pas mettre toute l'application dans un seul composant
  Nous allons devoir l'éclater en sous-composants et leur apprendre à travailler ensemble
  comme nous le verrons dans le [prochain chapitre](toh-pt3.html).

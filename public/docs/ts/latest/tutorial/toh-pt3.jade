include ../_util-fns

:marked
  Our app is growing.

  Notre application grossit.

  Use cases are flowing in for reusing components, passing data to components, and creating more reusable assets. Let's separate the heroes list from the hero details and make the details component reusable.

  Les cas d'utilisations nous orientent vers la réutilisation de composants, le passage de données vers ces composants et la création de ressources réutilisables. Nous allons séparer notre liste de héros de la vue de détail et nous rendrons cette vue détail réutilisable.

  Run the <live-example></live-example> for this part.

  Exécutez la <live-example>démo</live-example> correspondante à cette partie.

.l-main-section
:marked
  ## Where We Left Off

  ## Ou nous étions-nous arrêtés ?

  Before we continue with our Tour of Heroes, let’s verify we have the following structure. If not, we’ll need to go back and follow the previous chapters.

  Avant de continuer notre Guide des Héros, vérifiez que vous avez bien la structure suivante. Si ce n'est pas le cas, vous devez revenir en arrière et suivre les étapes du chapitre précédent.

.filetree
  .file angular2-tour-of-heroes
  .children
    .file app
    .children
      .file app.component.ts
      .file main.ts
    .file node_modules ...
    .file typings ...
    .file index.html
    .file package.json
    .file styles.css
    .file systemjs.config.js
    .file tsconfig.json
    .file typings.json
:marked
  ### Keep the app transpiling and running

  ### Laissons l'application tourner

  We want to start the TypeScript compiler, have it watch for changes, and start our server. We'll do this by typing

  Nous souhaitons démarrer notre compilateur TypeScript, observer les changements de code et démarrer notre serveur. Pour cela tapez la commande

code-example(language="bash").
  npm start

:marked
  This will keep the application running while we continue to build the Tour of Heroes.

  Cette commande s'assure que l'application s'exécute pendant que nous travaillons sur notre Guide des Héros.

  ## Making a Hero Detail Component

  ## Faisons un composant détail d'un héros

  Our heroes list and our hero details are in the same component in the same file.
  They're small now but each could grow.
  We are sure to receive new requirements for one and not the other.
  Yet every change puts both components at risk and doubles the testing burden without benefit.
  If we had to reuse the hero details elsewhere in our app,
  the heroes list would tag along for the ride.

  Notre liste de héros et le détail d'un héros sont dans le même composant, dans le même fichier.
  Pour l'instant ils sont simples mais chacun d'eux peut devenir volumineux.
  Nous sommes sûr d'avoir des modifications pour l'un et pas forcement pour l'autre.
  Chaque changement induit alors des risques pour les deux composants et multiplie les efforts de test sans réel bénéfice.
  Si nous avions à réutiliser le détail d'un héros ailleurs dans notre application,
  la liste de héros serait alors aussi embarquée.

  Our current component violates the
  [Single Responsibility Principle](https://blog.8thlight.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html).
  It's only a tutorial but we can still do things right &mdash;
  especially if doing them right is easy and we learn how to build Angular apps in the process.

  Notre composant actuel viole le
  [Principe de Responsabilité Unique](https://blog.8thlight.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html).
  Ce n'est qu'un tutorial, mais nous souhaitons quand même faire les choses correctement &mdash;
  surtout si cela est simple et que nous apprenons en même temps à construire une application Angular.

  Let’s break the hero details out into its own component.

  Isolons le détail d'un héros dans son propre composant.

  ### Separating the Hero Detail Component

  ### Faisons un composant pour le détail d'un héros

  Add a new file named `hero-detail.component.ts` to the `app` folder and create `HeroDetailComponent` as follows.

  Ajoutez un nouveau fichier appelé `hero-detail.component.ts` au répertoire `app` et créez un  `HeroDetailComponent` comme indiqué ci-dessous.

+makeExample('toh-3/ts/app/hero-detail.component.ts', 'v1', 'app/hero-detail.component.ts (initial version)')(format=".")
.l-sub-section
  :marked
    ### Naming conventions

    ### Conventions de nommage
    We like to identify at a glance which classes are components and which files contain components.

    Nous aimerions identifier d'un simple coup d'oeil, les classes qui sont des composants et les fichiers qui contiennent des composants.

    Notice that  we have an `AppComponent` in a file named `app.component.ts` and our new
    `HeroDetailComponent` is in a file named `hero-detail.component.ts`.

    Veuillez noter que nous avons un `AppComponent` dans un fichier appelé `app.component.ts` et que notre nouveau
    `HeroDetailComponent` est dans un fichier nommé `hero-detail.component.ts`.

    All of our component names end in "Component".  All of our component file names end in ".component".

    Les noms de nos composants se terminent par "Component".  Les noms des fichiers contenant nos composants se terminent par ".component".

    We spell our file names in lower **[dash case](../guide/glossary.html#!#dash-case)**
    (AKA **[kebab-case](../guide/glossary.html#!#kebab-case)**) so we don't worry about
    case sensitivity on the server or in source control.

    Nous utilisons pour les noms de fichiers la syntaxe **[dash case](../guide/glossary.html#!#dash-case)**
    (aussi appelée **[kebab-case](../guide/glossary.html#!#kebab-case)**) ainsi nous n'avons pas à nous soucier
    de la gestion des majuscules sur le serveur ou dans notre outil de gestionnaire de sources.

    <!-- TODO
    .l-sub-section
    :marked
    Learn more about naming conventions in the chapter [Naming Conventions]

    Apprenez en plus sur les conventions de nommage dans le chapite [Conventions de nommage]
    :marked
    -->
:marked
  We begin by importing the `Component` and `Input` decorators from Angular because we're going to need them soon.

  Commençons par importer les décorateurs `Component` et `Input` d'Angular car nous allons bientôt en avoir besoin.

  We create metadata with the `@Component` decorator where we
  specify the selector name that identifies this component's element.
  Then we export the class to make it available to other components.

  Nous allons créer des métadonnées à l'aide du décorateur `@Component` dans lesquelles
  nous allons spécifier le nom du sélecteur qui permettra d'identifier l'élément de notre composant.
  Nous exportons ensuite la classe afin de la rendre disponible pour les autres composants.

  When we finish here, we'll import it into `AppComponent` and create a corresponding `<my-hero-detail>`  element.

  Une fois tout cela terminé, nous allons l'importer dans notre `AppComponent` et créer l'élément `<my-hero-detail>` correspondant.
:marked
  #### Hero Detail Template

  #### Template du détail d'un héros
  At the moment, the *Heroes* and *Hero Detail* views are combined in one template in `AppComponent`.
  Let’s **cut** the *Hero Detail* content from `AppComponent` and **paste** it into the new template property of  `HeroDetailComponent`.

  A ce point, les vues *Liste de Héros* et *Détail d'un Héros* sont combinées dans le template de notre `AppComponent`.
  **Récupérons** le contenu du *Détail d'un Héros* du `AppComponent` et **plaçons** le dans la nouvelle propriété template de notre `HeroDetailComponent`.

  We previously bound to the `selectedHero.name` property of the `AppComponent`.
  Our `HeroDetailComponent` will have a `hero` property, not a `selectedHero` property.
  So we replace `selectedHero` with `hero` everywhere in our new template. That's our only change.
  The result looks like this:

  Nous étions précédemment liés à la propriété `selectedHero.name` du `AppComponent`.
  Notre `HeroDetailComponent` aura lui une propriété `hero`et non `selectedHero`.
  Nous allons donc remplacer `selectedHero` par `hero` partout dans notre nouveau template. Cela sera notre seul changement.
  Le résultat ressemble à ça&nbsp;:

+makeExample('toh-3/ts/app/hero-detail.component.ts', 'template', 'app/hero-detail.component.ts (template)')(format=".")

:marked
  Now our hero detail layout exists only in the `HeroDetailComponent`.

  Désormais notre vue détail existe seulement dans le composant `HeroDetailComponent`.

  #### Add the *hero* property

  #### Ajoutons une propriété *hero*

  Let’s add that `hero` property we were talking about to the component class.

  Ajoutons à la classe de notre composant, la propriété `hero` dont nous parlions à l'instant.

+makeExample('toh-3/ts/app/hero-detail.component.ts', 'hero')
:marked
  Uh oh. We declared the `hero` property as type `Hero` but our `Hero` class is over in the `app.component.ts` file.
  We have two components, each in their own file, that need to reference the `Hero` class.

  Oh, oh. Nous avons déclaré la propriété `hero` de type `Hero` mais notre classe `Hero` est dans le fichier `app.component.ts`.
  Nous avons deux composants, chacun dans son propre fichier, qui font référence à la classe `Hero`.

  We solve the problem by relocating the `Hero` class from `app.component.ts` to its own `hero.ts` file.

  Nous allons résoudre ce probleme en déplaçant la classe `Hero` du fichier `app.component.ts` vers le fichier `hero.ts`.

+makeExample('toh-3/ts/app/hero.ts', '', 'app/hero.ts')(format=".")

:marked
  We export the `Hero` class from `hero.ts` because we'll need to reference it in both component files.
  Add the following import statement near the top of **both `app.component.ts` and `hero-detail.component.ts`**.

  Nous exportons la classe `Hero` à partir du fichier `hero.ts` car nous aurons besoin de la référencer dans nos deux fichiers de composants.
  Ajoutez l'import ci-dessous en haut, dans les deux fichiers **`app.component.ts` et `hero-detail.component.ts`**.

+makeExample('toh-3/ts/app/hero-detail.component.ts', 'hero-import')

:marked
  #### The *hero* property is an ***input***

  #### La propriété *hero* est une ***entrée***

  The `HeroDetailComponent` must be told what hero to display. Who will tell it? The parent `AppComponent`!

  Le composant `HeroDetailComponent` doit savoir quel héros afficher. Qui va le lui dire&nbsp;? Son parent, le `AppComponent`&nbsp;!

  The `AppComponent` knows which hero to show: the hero that the user selected from the list.
  The user's selection is in its `selectedHero` property.

  Le composant `AppComponent` sait quel héros afficher&nbsp;: celui que l'utilisateur a sélectionné dans la liste.
  La sélection de l'utilisateur se trouve dans la propriété `selectedHero`.

  We will soon update the `AppComponent` template so that it binds its `selectedHero` property
  to the `hero` property of our `HeroDetailComponent`. The binding *might* look like this:

  Nous allons modifier le template du `AppComponent` pour lier sa propriété `selectedHero` à
  la propriété `hero` de notre `HeroDetailComponent`. Le binding *pourrait* ressembler à ça&nbsp;:
code-example(format=".").
  &lt;my-hero-detail [hero]="selectedHero">&lt;/my-hero-detail>
:marked
  Notice that the `hero` property is the ***target*** of a property binding &mdash; it's in square brackets to the left of the (=).

  Veuillez noter que la propriété `hero` est la ***cible*** d'un binding de propriété &mdash; elle est entre double accolades à gauche du (=).

  Angular insists that we declare a ***target*** property to be an ***input*** property.
  If we don't, Angular rejects the binding and throws an error.

  Angular demande à ce que nous déclarions les propriétés ***cibles*** comme étant des propriétés ***en entrée***.
  Si nous ne le faisons pas, Angular rejette le binding et lance une erreur.

.l-sub-section
  :marked
    We explain input properties in more detail [here](../guide/attribute-directives.html#why-input)
    where we also explain why *target* properties require this special treatment and
    *source* properties do not.

    Nous expliquons plus en détails les propriétes en entrée [ici](../guide/attribute-directives.html#why-input).
    Vous y verrez aussi pourquoi les propriétés *cibles* nécessitent un traitement spécial alors
    que les propriétés *sources* non.
:marked
  There are a couple of ways we can declare that `hero` is an *input*.
  We'll do it the way we *prefer*, by annotating the `hero` property with the `@Input` decorator that we imported earlier.

  Il y a plusieurs façons de déclarer la propriété `hero` en *entrée*.
  Nous allons le faire comme nous le *préférons*, en annotant la propriété `hero` avec le décorateur `@Input` importé précédemment.
+makeExample('toh-3/ts/app/hero-detail.component.ts', 'hero-input')(format='.')

.l-sub-section
  :marked
    Learn more about the `@Input()` decorator in the
    [Attribute Directives](../guide/attribute-directives.html#input) chapter.

    Apprenez en plus sur le décorateur `@Input()` dans le chapitre
    [Directives attributs](../guide/attribute-directives.html#input).

.l-main-section
:marked
  ## Refresh the AppComponent

  ## Mise à jour du  AppComponent

  We return to the `AppComponent` and teach it to use the `HeroDetailComponent`.

  Retournons à notre `AppComponent` et apprenons lui à utiliser le `HeroDetailComponent`.

  We begin by importing the `HeroDetailComponent` so we can refer to it.

  Commençons par importer le `HeroDetailComponent` pour pouvoir l'utiliser.

+makeExample('toh-3/ts/app/app.component.ts', 'hero-detail-import')

:marked
  Find the location in the template where we removed the *Hero Detail* content
  and add an element tag that represents the `HeroDetailComponent`.

  Localisez dans le template la section où nous avons retiré le contenu du *Détail d'un héros*
  et ajoutez y la balise qui représente notre `HeroDetailComponent`.
code-example(format=".").
  &lt;my-hero-detail>&lt;/my-hero-detail>
.l-sub-section
  :marked
    *my-hero-detail* is the name we set as the  `selector` in the `HeroDetailComponent` metadata.

    *my-hero-detail* est le nom défini dans le `selecteur` des métadonnées du `HeroDetailComponent`.
:marked
  The two components won't coordinate until we bind the `selectedHero` property of the `AppComponent`
  to the `HeroDetailComponent` element's `hero` property  like this:

  Les deux composant ne seront pas synchronisés tant que la propriété `selectedHero` du `AppComponent`
  ne sera pas liée à la propriété `hero` du `HeroDetailComponent` comme indiqué ci-dessous&nbsp;:
code-example(format=".")
&lt;my-hero-detail [hero]="selectedHero">&lt;/my-hero-detail>
:marked
  The `AppComponent`’s template should now look like this

  Le template du `AppComponent`devrait maintenant ressembler à ça&nbsp;:

+makeExample('toh-3/ts/app/app.component.ts', 'hero-detail-template', 'app.component.ts (template)')(format='.')
:marked
  Thanks to the binding, the `HeroDetailComponent` should receive the hero from the `AppComponent` and display that hero's detail beneath the list.
  The detail should update every time the user picks a new hero.

  Grâce au binding, le `HeroDetailComponent` devrait donc recevoir le héros du `AppComponent` et en afficher les détails juste sous la liste.
  Les détails seront mis à jour à chaque fois que l'utilisateur choisira un nouveau héros.

  It's not happening yet!

  Rien ne se passe&nbsp;!

  We click among the heroes. No details. We look for an error in the console of the browser development tools. No error.

  Nous cliquons sur un héros et aucun detail ne s'affiche. Si nous regardons dans la console pour une eventuelle erreur, nous n'en trouvons pas.

  It is as if Angular were ignoring the new tag. That's because *it is ignoring the new tag*.

  C'est comme si Angular ignore notre nouvelle balise. Et c'est parce que *il ne connait pas notre nouvelle balise*.

  ### The *directives* array

  ### Le tableau *directives*

  A browser ignores HTML tags and attributes that it doesn't recognize. So does Angular.

  Un navigateur ignore les balises et attributs HTML qu'il ne connait pas. Il en est de même pour Angular.

  We've imported `HeroDetailComponent`, we've used it in the template, but we haven't told Angular about it.

  Nous avons importé le `HeroDetailComponent`, nous l'avons utilisé dans le template mais Angular ne sait rien à son sujet.

  We tell Angular about it by listing it in the metadata `directives` array. Let's add that array property to the bottom of the
  `@Component` configuration object, immediately after the `template` and `styles` properties.

  Nous allons y remédier en l'ajoutant dans le tableau `directives`. Rajoutons le dans l'objet de configuration
  `@Component`, juste en dessous des propriétés `template` et `styles`.
+makeExample('toh-3/ts/app/app.component.ts', 'directives', 'app/app.component.ts (Directives)')

:marked
  ### It works!

  ### Ca marche&nbsp;!

  When we view our app in the browser we see the list of heroes.
  When we select a hero we can see the selected hero’s details.

  Lorsque l'application se charge dans le navigateur, nous avons une liste de héros.
  Lorsque nous sélectionnons un héros, nous pouvons alors observer son détail.

  What's fundamentally new is that we can use this `HeroDetailComponent`
  to show hero details anywhere in the app.

  Ce qui est fondamentalement nouveau c'est que nous pouvons désormais utiliser
  le `HeroDetailComponent` pour afficher le détail d'un héros n'importe où dans notre application.

  We’ve created our first reusable component!

  Nous avons créé notre premier composant réutilisable&nbsp;!

  ### Reviewing the App Structure

  ### Revoyons ensemble la structure de notre application

  Let’s verify that we have the following structure after all of our good refactoring in this chapter:

  Vérifions que nous avons bien la structure suivante après toutes les modifications effectuées dans ce chapitre:

.filetree
  .file angular2-tour-of-heroes
  .children
    .file app
    .children
      .file app.component.ts
      .file hero.ts
      .file hero-detail.component.ts
      .file main.ts
    .file node_modules ...
    .file typings ...
    .file index.html
    .file package.json
    .file tsconfig.json
    .file typings.json
:marked
  Here are the code files we discussed in this chapter.

  Voici l'ensemble du code évoqué dans ce chapitre.

+makeTabs(`
        toh-3/ts/app/hero-detail.component.ts,
toh-3/ts/app/app.component.ts,
toh-3/ts/app/hero.ts
        `,'',`
        app/hero-detail.component.ts,
app/app.component.ts,
app/hero.ts
        `)

.l-main-section
:marked
  ## The Road We’ve Travelled

  ## Qu'avons nous accompli ?


  Let’s take stock of what we’ve built.

  Revoyons ce que nous avons réalisé.

  * We created a reusable component

  * Nous avons créé un composant réutilisable

  * We learned how to make a component accept input

  * Nous avons appris à définir une donnée en entrée pour un composant

  * We learned to bind a parent component to a child component.

  * Nous avons appris à lier un composant parent à un composant enfant

  * We learned to declare the application directives we need in a `directives` array.

  * Nous avons appris à définir les directives que nous utilisons dans le tableau `directives`

  Run the <live-example></live-example> for this part.

  Exécutez la <live-example>démo</live-example> correspondante à cette partie.

.l-main-section
:marked
  ## The Road Ahead

  ## Par la suite

  Our Tour of Heroes has become more reusable with shared components.

  Notre Guide des Héros est devenu plus réutilisable avec des composants partagés.

  We're still getting our (mock) data within the `AppComponent`.
  That's not sustainable.
  We should refactor data access to a separate service
  and share it among the components that need data.

  Nous avons toujours nos (fausses) données directement dans le `AppComponent`.
  Ce n'est pas satisfaisant.
  Nous devrions déporter l'accès aux données dans un service dédié et le partager entre tous les composants qui nécéssitent ces données.

  We’ll learn to create services in the [next tutorial](toh-pt4.html) chapter.

  Nous allons apprendre à créer des services dans le [prochain](toh-pt4.html) chapitre de ce tutorial.